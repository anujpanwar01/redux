{"ast":null,"code":"//initial State\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initial = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initial,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.decrement--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amout;\n    }\n\n  }\n});\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"increment\":\n      return { ...state,\n        counter: state.counter + 1\n      };\n\n    case \"increase\":\n      return { ...state,\n        counter: state.counter + action.amout\n      };\n\n    case \"toggle\":\n      return { ...state,\n        showCounter: !state.showCounter\n      };\n\n    case \"decrement\":\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/HP/Desktop/redux-sm-project/src/components/store/reducer.js"],"names":["createSlice","initial","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","amout","reducer","type"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE,CADK;AAEdC,EAAAA,WAAW,EAAE;AAFC,CAAhB;AAIA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEL,OAFiB;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHO;;AAIRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACC,SAAN;AACD,KANO;;AAORC,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,KAAvC;AACD;;AATO;AAHqB,CAAD,CAAhC;;AAgBA,MAAMC,OAAO,GAAG,YAA6B;AAAA,MAA5BL,KAA4B,uEAApBR,OAAoB;AAAA,MAAXW,MAAW;;AAC3C,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELP,QAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAgB;AAFpB,OAAP;;AAIF,SAAK,UAAL;AACE,aAAO,EACL,GAAGO,KADE;AAGLP,QAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC;AAH3B,OAAP;;AAMF,SAAK,QAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAGLN,QAAAA,WAAW,EAAE,CAACM,KAAK,CAACN;AAHf,OAAP;;AAMF,SAAK,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAGLP,QAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,GAAgB;AAHpB,OAAP;;AAKF;AACE,aAAOO,KAAP;AA3BJ;AA6BD,CA9BD;;AA+BA,eAAeK,OAAf","sourcesContent":["//initial State\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initial = {\r\n  counter: 0,\r\n  showCounter: true,\r\n};\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initial,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.decrement--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.amout;\r\n    },\r\n  },\r\n});\r\n\r\nconst reducer = (state = initial, action) => {\r\n  switch (action.type) {\r\n    case \"increment\":\r\n      return {\r\n        ...state,\r\n        counter: state.counter + 1,\r\n      };\r\n    case \"increase\":\r\n      return {\r\n        ...state,\r\n\r\n        counter: state.counter + action.amout,\r\n      };\r\n\r\n    case \"toggle\":\r\n      return {\r\n        ...state,\r\n\r\n        showCounter: !state.showCounter,\r\n      };\r\n\r\n    case \"decrement\":\r\n      return {\r\n        ...state,\r\n\r\n        counter: state.counter - 1,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}