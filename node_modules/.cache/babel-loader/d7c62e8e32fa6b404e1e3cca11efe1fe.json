{"ast":null,"code":"var spawn = require('child_process').spawn;\n\nvar exec = require('child_process').exec;\n\nvar inpath = require('inpath').sync;\n\nvar pidof = require('pidof');\n\nvar sudo = inpath('sudo');\nvar isWin = process.platform == 'win32';\nvar messages = ['PID is null', 'Password is invalid'];\n\nfunction sudoCommand(command, password, withResult, callback) {\n  password = password || '';\n  withResult = withResult === undefined ? true : withResult;\n\n  callback = callback || function () {};\n\n  var error = null;\n  var pid = '';\n  var result = '';\n  var prompt = '#sudo-js-passwd#';\n  var prompts = 0;\n  var args = ['-S', '-k', '-p', prompt].concat(command);\n  var spawnProcess = spawn(sudo, args, {\n    stdio: 'pipe'\n  });\n  var bin = command.filter(function (i) {\n    return i.indexOf('-') !== 0;\n  })[0];\n  spawnProcess.stdout.on('data', function (data) {\n    result += \"\\n\" + data.toString();\n  });\n\n  if (withResult) {\n    spawnProcess.on('close', function (code) {\n      callback(error, pid, result);\n    });\n  }\n\n  function waitForStartup(err, _pid) {\n    if (err) {\n      throw new Error('Couldn\\'t start ' + bin);\n    }\n\n    if (_pid || spawnProcess.exitCode !== null) {\n      error = null;\n      pid = _pid;\n\n      if (!withResult) {\n        callback(error, pid, result);\n      }\n    } else {\n      setTimeout(function () {\n        pidof(bin, waitForStartup);\n      }, 100);\n    }\n  }\n\n  pidof(bin, waitForStartup);\n  spawnProcess.stderr.on(\"data\", function (data) {\n    data.toString().trim().split('\\n').forEach(function (line) {\n      if (line === prompt) {\n        if (++prompts > 1) {\n          callback(true, {\n            code: 1,\n            msg: messages[1]\n          }, result);\n          spawnProcess.stdin.write(\"\\n\\n\\n\\n\");\n        } else {\n          spawnProcess.stdin.write(password + \"\\n\");\n        }\n      }\n    });\n  });\n}\n\nfunction sudoCommandForWindows(command, withResult, callback) {\n  var bin = command[0];\n  command.splice(0, 1);\n  var result = '';\n  var task = spawn(bin, command, {\n    shell: true\n  });\n  task.stderr.on('data', function (data) {\n    data = data.toString();\n\n    if (data.trim() != '' && withResult) {\n      result += \"\\n\" + data;\n    }\n  });\n  task.stdout.on('data', function (data) {\n    data = data.toString();\n\n    if (data.trim() != '' && withResult) {\n      result += \"\\n\" + data;\n    }\n  });\n  task.on('close', function (code) {\n    callback(null, null, result);\n  });\n  task.on('error', function (code) {\n    callback(true, null, result);\n  });\n}\n\nmodule.exports = {\n  password: '',\n  setPassword: function (password) {\n    this.password = password;\n  },\n  check: function (callback) {\n    if (isWin) {\n      // next update\n      callback(true);\n    } else {\n      sudoCommand(['ls'], this.password, false, function (i) {\n        return function (err) {\n          if (!i++) {\n            callback(!err);\n          }\n        };\n      }(0));\n    }\n  },\n  exec: function (command, options, callback) {\n    var self = this;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options !== 'object') {\n      options = {};\n    }\n\n    if (typeof callback !== 'function') {\n      callback = function () {};\n    }\n\n    if (!Array.isArray(command)) {\n      command = [command];\n    }\n\n    if (isWin) {\n      // exec(command.join(' '), function(err, stdout, stderr) {\n      //     callback(err, {}, stdout.toString());\n      // });\n      // change method to spawn\n      sudoCommandForWindows(command, options.withResult, callback);\n    } else {\n      if (options.check === true || options.check === undefined) {\n        this.check(function (valid) {\n          if (valid) {\n            sudoCommand(command, self.password, options.withResult, callback);\n          } else {\n            callback(true, {\n              code: 1,\n              msg: messages[1]\n            }, '');\n          }\n        });\n      } else {\n        sudoCommand(command, self.password, options.withResult, callback);\n      }\n    }\n  },\n  killByPid: function (pid, callback) {\n    if (pid) {\n      pid = pid.toString();\n\n      if (isWin) {\n        this.exec([\"tskill\", pid], callback);\n      } else {\n        this.exec([\"kill\", \"-9\", pid], callback);\n      }\n    }\n  },\n  killByName: function (name, callback) {\n    var self = this;\n    pidof(name, function (err, pid) {\n      if (pid) {\n        self.killByPid(pid, callback);\n      } else {\n        callback(true, {\n          code: 0,\n          msg: messages[0]\n        }, '');\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/HP/node_modules/sudo-js/index.js"],"names":["spawn","require","exec","inpath","sync","pidof","sudo","isWin","process","platform","messages","sudoCommand","command","password","withResult","callback","undefined","error","pid","result","prompt","prompts","args","concat","spawnProcess","stdio","bin","filter","i","indexOf","stdout","on","data","toString","code","waitForStartup","err","_pid","Error","exitCode","setTimeout","stderr","trim","split","forEach","line","msg","stdin","write","sudoCommandForWindows","splice","task","shell","module","exports","setPassword","check","options","self","Array","isArray","valid","killByPid","killByName","name"],"mappings":"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","sourcesContent":["var spawn = require('child_process').spawn;\nvar exec = require('child_process').exec;\nvar inpath = require('inpath').sync;\nvar pidof = require('pidof');\nvar sudo = inpath('sudo');\nvar isWin = (process.platform == 'win32');\nvar messages = [\n    'PID is null',\n    'Password is invalid'\n];\n\nfunction sudoCommand(command, password, withResult, callback) {\n    password = password || '';\n    withResult = withResult === undefined ? true : withResult;\n    callback = callback || function() {\n\n    };\n\n    var error = null;\n    var pid = '';\n    var result = '';\n    var prompt = '#sudo-js-passwd#';\n    var prompts = 0;\n    var args = ['-S', '-k', '-p', prompt].concat(command);\n\n    var spawnProcess = spawn(sudo, args, {stdio: 'pipe'});\n    \n    var bin = command.filter(function(i) {\n        return i.indexOf('-') !== 0;\n    })[0];\n\n    spawnProcess.stdout.on('data', function(data) {\n        result += \"\\n\"+ data.toString();\n    });\n\n    if (withResult) {\n        spawnProcess.on('close', function(code) {\n            callback(error, pid, result);\n        });\n    }\n\n    function waitForStartup(err, _pid) {\n        if (err) {\n            throw new Error('Couldn\\'t start '+ bin);\n        }\n\n        if (_pid || spawnProcess.exitCode !== null) {\n            error = null;\n            pid = _pid;\n            if (!withResult) {\n                callback(error, pid, result);\n            }\n        } else {\n            setTimeout(function() {\n                pidof(bin, waitForStartup);\n            }, 100);\n        }\n    }\n    pidof(bin, waitForStartup);\n\n    spawnProcess.stderr.on(\"data\", function (data) {\n        data.toString().trim().split('\\n').forEach(function(line) {\n            if (line === prompt) {\n                if (++prompts > 1) {\n                    callback(true, {code: 1, msg: messages[1]}, result);\n                    spawnProcess.stdin.write(\"\\n\\n\\n\\n\");\n                } else {\n                    spawnProcess.stdin.write(password + \"\\n\");\n                }\n            }\n        });\n    });\n}\n\nfunction sudoCommandForWindows(command, withResult, callback) {\n    var bin = command[0];\n    command.splice(0, 1);\n    var result = '';\n    var task = spawn(bin, command, {\n        shell: true\n    });\n\n    task.stderr.on('data', function(data) {\n        data = data.toString();\n        if (data.trim() != '' && withResult) {\n            result += \"\\n\"+ data;\n        }\n    });\n\n    task.stdout.on('data', function(data) {\n        data = data.toString();\n        if (data.trim() != '' && withResult) {\n            result += \"\\n\"+ data;\n        }\n    });\n\n    task.on('close', function(code) {\n        callback(null, null, result);\n    });\n\n    task.on('error', function(code) {\n        callback(true, null, result);\n    });\n}\n\nmodule.exports = {\n    password: '',\n    setPassword: function(password) {\n        this.password = password;\n    },\n    check: function(callback) {\n        if (isWin) {\n            // next update\n            callback(true);\n        } else {\n            sudoCommand(['ls'], this.password, false, (function(i) {\n              return function (err) {\n                if (!i++) {\n                  callback(!err)\n                }\n              }\n            })(0));\n        }\n    },\n    exec: function(command, options, callback) {\n        var self = this;\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options !== 'object') {\n            options = {};\n        }\n\n        if (typeof callback !== 'function') {\n            callback = function() {\n\n            }\n        }\n\n        if (!Array.isArray(command)) {\n            command = [command];\n        }\n\n        if (isWin) {\n            // exec(command.join(' '), function(err, stdout, stderr) {\n            //     callback(err, {}, stdout.toString());\n            // });\n            // change method to spawn\n            sudoCommandForWindows(command, options.withResult, callback);\n        } else {\n            if (options.check === true || options.check === undefined) {\n                this.check(function(valid) {\n                    if (valid) {\n                        sudoCommand(command, self.password,\n                            options.withResult, callback);\n                    } else {\n                        callback(true, {code: 1, msg: messages[1]}, '');\n                    }\n                });\n            } else {\n                sudoCommand(command, self.password, options.withResult, callback);\n            }\n        }\n    },\n    killByPid: function(pid, callback) {\n        if (pid) {\n            pid = pid.toString();\n            if (isWin) {\n                this.exec([\"tskill\", pid], callback);\n            } else {\n                this.exec([\"kill\", \"-9\", pid], callback);\n            }\n        }\n    },\n    killByName: function(name, callback) {\n        var self = this;\n        pidof(name, function(err, pid) {\n            if (pid) {\n                self.killByPid(pid, callback);\n            } else {\n                callback(true, {code: 0, msg: messages[0]}, '');\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"script"}